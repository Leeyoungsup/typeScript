{"version":3,"sources":["graphql.js"],"names":["require","config","typeDefs","gql","resolvers","Query","users","_parent","_args","_context","_info","db","collection","findOne","then","data","schema","apolloServer","ApolloServer","context","dbClient","MongoClient","process","env","MONGO_DB_URI","useNewUrlParser","useUnifiedTopology","isConnected","connect","console","log","api","bodyParser"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;AAEAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,IAAMC,QAAQ,OAAGC,sBAAH,oBAAd;AAcA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KADK,iBACCC,OADD,EACUC,KADV,EACiBC,QADjB,EAC2BC,KAD3B,EACkC;AACrC,aAAOD,QAAQ,CAACE,EAAT,CACJC,UADI,CACO,OADP,EAEJC,OAFI,GAGJC,IAHI,CAGC,UAACC,IAAD,EAAU;AACd,eAAOA,IAAI,CAACT,KAAZ;AACD,OALI,CAAP;AAMD;AARI;AADS,CAAlB;AAaA,IAAMU,MAAM,GAAG,wCAAqB;AAClCd,EAAAA,QAAQ,EAARA,QADkC;AAElCE,EAAAA,SAAS,EAATA;AAFkC,CAArB,CAAf;AAKA,IAAIO,EAAJ;AAEA,IAAMM,YAAY,GAAG,IAAIC,+BAAJ,CAAiB;AACpCF,EAAAA,MAAM,EAANA,MADoC;AAEpCG,EAAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACFR,EADE;AAAA;AAAA;AAAA;;AAAA;AAGGS,YAAAA,QAHH,GAGc,IAAIC,oBAAJ,CAAgBC,OAAO,CAACC,GAAR,CAAYC,YAA5B,EAA0C;AACzDC,cAAAA,eAAe,EAAE,IADwC;AAEzDC,cAAAA,kBAAkB,EAAE;AAFqC,aAA1C,CAHd;;AAAA,gBAQEN,QAAQ,CAACO,WAAT,EARF;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAQgCP,QAAQ,CAACQ,OAAT,EARhC;;AAAA;AASHjB,YAAAA,EAAE,GAAGS,QAAQ,CAACT,EAAT,CAAY,cAAZ,CAAL,CATG,CAS+B;;AAT/B;AAAA;;AAAA;AAAA;AAAA;AAWHkB,YAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ;;AAXG;AAAA,8CAeA;AAAEnB,cAAAA,EAAE,EAAFA;AAAF,aAfA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAF2B,CAAjB,CAArB;AAqBO,IAAMV,MAAM,GAAG;AACpB8B,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { MongoClient } from 'mongodb';\n\nrequire('dotenv').config();\n\nconst typeDefs = gql`\n  type User {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    blog: String\n    stars: Int\n  }\n\n  type Query {\n    users: [User]!\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    users(_parent, _args, _context, _info) {\n      return _context.db\n        .collection('users')\n        .findOne()\n        .then((data) => {\n          return data.users;\n        });\n    },\n  },\n};\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n\nlet db;\n\nconst apolloServer = new ApolloServer({\n  schema,\n  context: async () => {\n    if (!db) {\n      try {\n        const dbClient = new MongoClient(process.env.MONGO_DB_URI, {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n        });\n\n        if (!dbClient.isConnected()) await dbClient.connect();\n        db = dbClient.db('next-graphql'); // database name\n      } catch (e) {\n        console.log('--->error while connecting via graphql context (db)', e);\n      }\n    }\n\n    return { db };\n  },\n});\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n"],"file":"graphql.dev.js"}