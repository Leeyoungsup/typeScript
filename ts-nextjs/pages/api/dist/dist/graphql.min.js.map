{"version":3,"sources":["graphql.js"],"names":["_apolloServerMicro","require","_graphqlTools","_mongodb","config","typeDefs","gql","_templateObject","resolvers","Query","users","_parent","_args","_context","db","collection","findOne","then","data","schema","makeExecutableSchema","apolloServer","ApolloServer","context","dbClient","MongoClient","process","env","MONGO_DB_URI","useNewUrlParser","useUnifiedTopology","isConnected","connect","console","log","_context2","t0","api","bodyParser"],"mappings":"0FAAA,IAAAA,mBAAAC,QAAA,uBACAC,cAAAD,QAAA,iBACAE,SAAAF,QAAA,2ZAEAA,QAAQ,UAAUG,SAElB,IA4BEC,GA5BIA,UAAQ,EAAGC,mBAAAA,KAAHC,mBAcRC,UAAY,CAChBC,MAAO,CACLC,MADK,SACCC,EAASC,EAAOC,GACpB,OAAOA,EAASC,GACbC,WAAW,SApBZC,UAsBCC,KAAK,SAACC,GApBTb,OAAQa,EAAGZ,WAsBRa,QALH,EAAAjB,cAAAkB,sBAAA,CAMDf,SAAAA,SARIG,UAAAA,YAYTa,aAAA,IAAAC,mBAAAA,aAAA,CAKAH,OAAAA,OAEAI,QAAMF,WAAAA,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GACEP,GADFO,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,GAAAA,EAAAA,KAAAA,GAEKG,EAAA,IAAAC,SAAAA,YAAAC,QAAAC,IAAAC,aAAA,CAAAC,iBAAA,EAAAC,oBAAA,KAAAC,cAFLV,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAEKG,EAAAQ,WAFLX,KAAAA,EAEKP,GAAAU,EAAAV,GAAA,gBAFLO,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAEKY,QAAAC,IAAA,yDAAAC,EAAAC,IAFLf,KAAAA,GAAAA,OAAAA,EAAAA,OAAAA,SAMIQ,CAAAA,GAAAA,KANJR,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,QAEKjB,OAQEoB,CARFa,IAAA,CAAAC,YAAA","file":"graphql.min.js","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { MongoClient } from 'mongodb';\n\nrequire('dotenv').config();\n\nconst typeDefs = gql`\n  type User {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    blog: String\n    stars: Int\n  }\n\n  type Query {\n    users: [User]!\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    users(_parent, _args, _context, _info) {\n      return _context.db\n        .collection('users')\n        .findOne()\n        .then((data) => {\n          return data.users;\n        });\n    },\n  },\n};\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n\nlet db;\n\nconst apolloServer = new ApolloServer({\n  schema,\n  context: async () => {\n    if (!db) {\n      try {\n        const dbClient = new MongoClient(process.env.MONGO_DB_URI, {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n        });\n\n        if (!dbClient.isConnected()) await dbClient.connect();\n        db = dbClient.db('next-graphql'); // database name\n      } catch (e) {\n        console.log('--->error while connecting via graphql context (db)', e);\n      }\n    }\n\n    return { db };\n  },\n});\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n"]}