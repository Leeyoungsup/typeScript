{"version":3,"sources":["graphql.ts"],"names":["apollo_server_micro_1","require","graphql_tools_1","mongodb_1","config","db","typeDefs","gql","templateObject_1","__makeTemplateObject","resolvers","Query","users","_parent","_args","_context","_info","collection","findOne","then","data","schema","makeExecutableSchema","apolloServer","ApolloServer","context","__awaiter","dbClient","MongoClient","process","env","MONGO_DB_URI","useNewUrlParser","useUnifiedTopology","isConnected","connect","_a","sent","console","log","e_1","exports","api","bodyParser","createHandler","path"],"mappings":"8kDAAA,IAAAA,sBAAAC,QAAA,uBACAC,gBAAAD,QAAA,iBACAE,UAAAF,QAAA,WAEAA,QAAQ,UAAUG,SAElB,IAgCIC,oBAhCEC,SAAWN,sBAAAO,IAAGC,iBAAAA,kBAAAC,qBAAA,CAAA,mKAAA,CAAA,qKAcdC,UAAY,CAChBC,MAAO,CACLC,MAAA,SAAMC,EAASC,EAAOC,EAAUC,GAC9B,OAAOD,EAASV,GACbY,WAAW,SACXC,UACAC,KAAK,SAACC,GACL,OAAOA,EAAKR,WAMhBS,OAASnB,gBAAAoB,qBAAqB,CAClChB,SAAQA,SACRI,UAASA,YAKLa,aAAe,IAAIvB,sBAAAwB,aAAa,CACpCH,OAAMA,OACNI,QAAS,WAAA,OAAAC,eAAA,OAAA,OAAA,EAAA,iFACFrB,GAAD,MAAA,CAAA,EAAA,kDAEMsB,EAAW,IAAIxB,UAAAyB,YAAYC,QAAQC,IAAIC,aAAc,CACzDC,iBAAiB,EACjBC,oBAAoB,KAGRC,cAAV,CAAA,EAAA,GAAyB,CAAA,EAAMP,EAASQ,kBAAfC,EAAAC,+BAC7BhC,GAAKsB,EAAStB,GAAG,+CAEjBiC,QAAQC,IAAI,yDAAuDC,gBAIvE,MAAA,CAAA,EAAO,CAAEnC,GAAEA,aAIFoC,QAAArC,OAAS,CACpBsC,IAAK,CACHC,YAAY,IAIhBF,QAAA,QAAelB,aAAaqB,cAAc,CAAEC,KAAM","file":"graphql.min.js","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro';\r\nimport { makeExecutableSchema } from 'graphql-tools';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nrequire('dotenv').config();\r\n\r\nconst typeDefs = gql`\r\n  type User {\r\n    id: ID!\r\n    firstName: String!\r\n    lastName: String!\r\n    blog: String\r\n    stars: Int\r\n  }\r\n\r\n  type Query {\r\n    users: [User]!\r\n  }\r\n`;\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    users(_parent, _args, _context, _info) {\r\n      return _context.db\r\n        .collection('users')\r\n        .findOne()\r\n        .then((data: any) => {\r\n          return data.users;\r\n        });\r\n    },\r\n  },\r\n};\r\n\r\nconst schema = makeExecutableSchema({\r\n  typeDefs,\r\n  resolvers,\r\n});\r\n\r\nlet db: any;\r\n\r\nconst apolloServer = new ApolloServer({\r\n  schema,\r\n  context: async () => {\r\n    if (!db) {\r\n      try {\r\n        const dbClient = new MongoClient(process.env.MONGO_DB_URI, {\r\n          useNewUrlParser: true,\r\n          useUnifiedTopology: true,\r\n        });\r\n\r\n        if (!dbClient.isConnected()) await dbClient.connect();\r\n        db = dbClient.db('next-graphql'); // database name\r\n      } catch (e) {\r\n        console.log('--->error while connecting via graphql context (db)', e);\r\n      }\r\n    }\r\n\r\n    return { db };\r\n  },\r\n});\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n\r\nexport default apolloServer.createHandler({ path: '/api/graphql' });\r\n"]}