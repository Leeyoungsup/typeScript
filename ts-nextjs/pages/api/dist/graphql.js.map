{"version":3,"sources":["graphql.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2DAAwD;AACxD,+CAAqD;AACrD,mCAAsC;AAEtC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;AAE3B,IAAM,QAAQ,GAAG,yBAAG,oOAAA,iKAYnB,IAAA,CAAC;AAEF,IAAM,SAAS,GAAG;IAChB,KAAK,EAAE;QACL,KAAK,EAAL,UAAM,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK;YACnC,OAAO,QAAQ,CAAC,EAAE;iBACf,UAAU,CAAC,OAAO,CAAC;iBACnB,OAAO,EAAE;iBACT,IAAI,CAAC,UAAC,IAAS;gBACd,OAAO,IAAI,CAAC,KAAK,CAAC;YACpB,CAAC,CAAC,CAAC;QACP,CAAC;KACF;CACF,CAAC;AAEF,IAAM,MAAM,GAAG,oCAAoB,CAAC;IAClC,QAAQ,UAAA;IACR,SAAS,WAAA;CACV,CAAC,CAAC;AAEH,IAAI,EAAO,CAAC;AAEZ,IAAM,YAAY,GAAG,IAAI,kCAAY,CAAC;IACpC,MAAM,QAAA;IACN,OAAO,EAAE;;;;;yBACH,CAAC,EAAE,EAAH,wBAAG;;;;oBAEG,QAAQ,GAAG,IAAI,qBAAW,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE;wBACzD,eAAe,EAAE,IAAI;wBACrB,kBAAkB,EAAE,IAAI;qBACzB,CAAC,CAAC;yBAEC,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAvB,wBAAuB;oBAAE,qBAAM,QAAQ,CAAC,OAAO,EAAE,EAAA;;oBAAxB,SAAwB,CAAC;;;oBACtD,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,gBAAgB;;;;oBAElD,OAAO,CAAC,GAAG,CAAC,qDAAqD,EAAE,GAAC,CAAC,CAAC;;wBAI1E,sBAAO,EAAE,EAAE,IAAA,EAAE,EAAC;;;SACf;CACF,CAAC,CAAC;AAEU,QAAA,MAAM,GAAG;IACpB,GAAG,EAAE;QACH,UAAU,EAAE,KAAK;KAClB;CACF,CAAC;AAEF,qBAAe,YAAY,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC","file":"graphql.js","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro';\r\nimport { makeExecutableSchema } from 'graphql-tools';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nrequire('dotenv').config();\r\n\r\nconst typeDefs = gql`\r\n  type User {\r\n    id: ID!\r\n    firstName: String!\r\n    lastName: String!\r\n    blog: String\r\n    stars: Int\r\n  }\r\n\r\n  type Query {\r\n    users: [User]!\r\n  }\r\n`;\r\n\r\nconst resolvers = {\r\n  Query: {\r\n    users(_parent, _args, _context, _info) {\r\n      return _context.db\r\n        .collection('users')\r\n        .findOne()\r\n        .then((data: any) => {\r\n          return data.users;\r\n        });\r\n    },\r\n  },\r\n};\r\n\r\nconst schema = makeExecutableSchema({\r\n  typeDefs,\r\n  resolvers,\r\n});\r\n\r\nlet db: any;\r\n\r\nconst apolloServer = new ApolloServer({\r\n  schema,\r\n  context: async () => {\r\n    if (!db) {\r\n      try {\r\n        const dbClient = new MongoClient(process.env.MONGO_DB_URI, {\r\n          useNewUrlParser: true,\r\n          useUnifiedTopology: true,\r\n        });\r\n\r\n        if (!dbClient.isConnected()) await dbClient.connect();\r\n        db = dbClient.db('next-graphql'); // database name\r\n      } catch (e) {\r\n        console.log('--->error while connecting via graphql context (db)', e);\r\n      }\r\n    }\r\n\r\n    return { db };\r\n  },\r\n});\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n\r\nexport default apolloServer.createHandler({ path: '/api/graphql' });\r\n"]}