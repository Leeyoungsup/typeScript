{"version":3,"sources":["Editor.tsx"],"names":["react_1","require","editorjs_1","EditorTools_1","EditorBlock","_a","data","onChange","holder","ref","useRef","useEffect","current","editor","tools","EDITOR_TOOLS","api","event","saver","save","sent","destroy","createElement","id","className","exports","memo"],"mappings":"y7CAAA,IAAAA,QAAAC,QAAA,SACAC,WAAAD,QAAA,sBACAE,cAAAF,QAAA,iBAOMG,YAAc,SAACC,OAAEC,EAAAD,EAAAC,KAAMC,EAAAF,EAAAE,SAAUC,EAAAH,EAAAG,OAE/BC,EAAMT,QAAAU,SAuBZ,OArBAV,QAAAW,UAAU,WAER,IAAKF,EAAIG,QAAS,CAChB,IAAMC,EAAS,IAAIX,WAAA,QAAS,CAC1BM,OAAQA,EACRM,MAAOX,cAAAY,aACPT,KAAIA,EACEC,SAAQ,SAACS,EAAKC,mHACL,MAAA,CAAA,EAAMD,EAAIE,MAAMC,sBAAvBb,EAAOD,EAAAe,OACbb,EAASD,eAGbG,EAAIG,QAAUC,EAGhB,OAAO,WACDJ,EAAIG,SAAWH,EAAIG,QAAQS,SAC7BZ,EAAIG,QAAQS,YAGf,IACIrB,QAAA,QAAAsB,cAAA,MAAA,CAAKC,GAAIf,EAAQgB,UAAU,sBAEpCC,QAAA,QAAezB,QAAA0B,KAAKtB","file":"Editor.min.js","sourcesContent":["import React, { memo, useEffect, useRef } from 'react';\r\nimport EditorJS, { OutputData } from '@editorjs/editorjs';\r\nimport { EDITOR_TOOLS } from './EditorTools';\r\n//props\r\ntype Props = {\r\n  data?: OutputData;\r\n  onChange(val: OutputData): void;\r\n  holder: string;\r\n};\r\nconst EditorBlock = ({ data, onChange, holder }: Props) => {\r\n  //add a reference to editor\r\n  const ref = useRef<EditorJS>();\r\n  //initialize editorjs\r\n  useEffect(() => {\r\n    //initialize editor if we don't have a reference\r\n    if (!ref.current) {\r\n      const editor = new EditorJS({\r\n        holder: holder,\r\n        tools: EDITOR_TOOLS,\r\n        data,\r\n        async onChange(api, event) {\r\n          const data = await api.saver.save();\r\n          onChange(data);\r\n        },\r\n      });\r\n      ref.current = editor;\r\n    }\r\n    //add a return function handle cleanup\r\n    return () => {\r\n      if (ref.current && ref.current.destroy) {\r\n        ref.current.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n  return <div id={holder} className=\"prose max-w-full\" />;\r\n};\r\nexport default memo(EditorBlock);\r\n"]}